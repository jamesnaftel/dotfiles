#!/bin/bash

# Helpers
function viewmd() { pandoc -t plain "$1" | less; }

# Git branch in prompt.
function parse_git_branch() {
	    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Make and enter a new dir
mkd() {
	mkdir -p "$@"
	cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression - thx jessfraz!
targz() {
	local tmpFile="${1%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${1}" || return 1

	size=$(
	stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
	stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`â€¦"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

function nvimvenv {
  if [[ -e "$VIRTUAL_ENV" && -f "$VIRTUAL_ENV/bin/activate" ]]; then
    source "$VIRTUAL_ENV/bin/activate"
    command nvim $@
    deactivate
  else
    command nvim $@
  fi
}

function tmux_env() {
    tmux new-session -d -s dev >/dev/null
    tmux rename-window -t dev:1 'notes'
    tmux send-keys -t dev:1 'cd ~/dev/notes/; v todo.md' Enter

    # fx1
    tmux new-window -t dev:2
    tmux rename-window -t dev:2 'fx'
    tmux send-keys -t dev:2 'fxd' Enter
    tmux splitw -h -t dev:2
    tmux select-pane -t dev:2.1

    #Exodus
    tmux new-window -t dev:3
    tmux rename-window -t dev:3 'exodus'
    tmux splitw -h -t dev:3

    #Kube&Infra
    tmux new-window -t dev:4
    tmux rename-window -t dev:4 'Kube'

    #servers
    tmux new-window -t dev:5
    tmux rename-window -t dev:5 'servers'
    tmux splitw -v -t dev:5
    tmux select-pane -t dev:5.1

    #rsync
    tmux new-window -t dev:6
    tmux rename-window -t dev:6 'rsync'

    #tinker
    tmux new-window -t dev:7
    tmux rename-window -t dev:7 'tinker'
    tmux send-keys -t dev:7 'cd ~/dev/lang/python/tinker/; v tinker.py' Enter
    tmux splitw -v -t dev:7
    tmux send-keys -t dev:7 'cd ~/dev/lang/python/tinker/' Enter

    tmux select-window -t dev:1

    tmux attach -t dev
}
